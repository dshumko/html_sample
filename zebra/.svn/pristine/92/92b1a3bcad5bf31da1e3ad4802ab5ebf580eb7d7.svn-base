var items = [];
var tc = null;

window.jasmine = jasmineRequire.core(jasmineRequire);
var env = jasmine.getEnv();
var jasmineInterface = jasmineRequire.interface(jasmine, env);

extend(window, jasmineInterface);

function extend(destination, source) {
    for (var property in source) destination[property] = source[property];
    return destination;
}

function testcase_list(type){
    this.action = "list";
    this.type = type;
    this.count = 0;
    this.path = "";
    this.testcases = null;
}

function test_item(id, type, desc){
    this.id = id;
    this.type = type;
    this.description = desc;
    this.items = [];
}

function test_result(id, result){
    this.action  = "result";
    this.id = id;
    this.type = tc_type;
    this.path = tc_path;
    this.result = result;
}

function test_start(){
    this.action  = "start";
    this.type = tc_type;
    this.path = tc_path;
}

function test_end(){
    this.action  = "end";
    this.type = tc_type;
    this.path = tc_path;
}


function search(item, id){
    if(item.id == id){
        return item;
    }else if (item.items.length == 0 ){
        return null;
    }
    else {
        for(var i=0; i<item.items.length; i++){

                if (item.items[i].id == id) {
                    return item.items[i];
                } else {
                    var ret = this.search(item.items[i], id);
                    if (ret != null) return ret;
                }

        }
        return null;
    }

    return null;
}

function makeList(suite)
{
    if(suite == null) return null;

    var children = suite.children;
    LOG(suite.id + "(" + children.length + ")");

    for(var i=0; i<children.length; i++)
    {
        var obj = children[i];
        if(obj.id.indexOf("suite") != -1)
        {
            if (items.length == 0){
                tc.count++;
                items.push(new test_item(obj.id, "suite", obj.description));
            }
            else{
                var m = search(items[0], obj.parentSuite.id);
                if(m != null){
                    tc.count++;
                    m.items.push(new test_item(obj.id, "suite", obj.description));
                }
            }
            makeList(obj);
        }
        else if(obj.id.indexOf("spec") != -1)
        {
            var m = search(items[0], suite.id);
            if (m != null) {
                tc.count++;
                m.items.push(new test_item(obj.id, "spec", obj.description));
            }
        }
    }
    return null;
}

function sendMessage(p){
    parent.postMessage(p,"*");
}

function list() {
    tc = new testcase_list("jasmine");
    tc.testcases = items;

    var top_suite = env.topSuite();
    makeList(top_suite);
    sendMessage(tc);
};

function testStart(path)
{
    var reporter = jasmineInterface.jsApiReporter;
    env.addReporter(reporter);
    env.execute();
}

function jasmineRunnerInit(){
    var top_suite = env.topSuite();
    var reporter = jasmineInterface.jsApiReporter;

    reporter.jasmineStarted = function(){
        LOG("jasmine started");
        sendMessage(new test_start());
    };
    reporter.jasmineDone = function(runDetails){
        sendMessage(new test_end());
        LOG("jsamine done");
    };
    reporter.suiteStarted = function(result)
    {
        LOG("suite started - " + result.id);
    };
    reporter.suiteDone = function(result)
    {
        LOG("suite done - " + result.id);
    };
    reporter.specStarted = function(result)
    {
        LOG("spec started - " + result.id);
    };
    reporter.specDone = function(result)
    {
        LOG("spec done - " + result.status);
        sendMessage(new test_result(result.id, result.status));
    };
};

function qunitRunnerInit(){
    QUnit.begin= function(){
        sendMessage(new test_start());
        LOG("QUNIT-START");
    };

    QUnit.done = function(){
        sendMessage(new test_end());
        LOG("QUNIT-DONE");
    };

    QUnit.log = function(details){
        LOG("QUNIT-LOG");
    };

    QUnit.moduleDone = function(){
        LOG("QUNIT-MODULE DONE");
    };

    QUnit.moduleStart= function(){
        LOG("QUNIT-MODULE START");
    };

    QUnit.testStart = function(result){
        LOG("QUNIT-TEST START");
    };
    QUnit.testDone = function(details){
        LOG("Finished [", details.module, "] [", details.name, "] ", "Failed/Passed/total: ", details.failed, " / ", details.passed, "/", details.total);
        LOG("QUNIT-TEST DONE");

        var result = (details.passed == 1) ? "passed" : "failed";
        var id = fintQunitTC(details.name);
        sendMessage(new test_result(id, result));
    };

    QUnit.start();
}

var load = 0, loaded = 0;

var tc_path = "";
var tc_type = "";
var tc_action = "";

function parseURL(url) {
    var a =  document.createElement('a');
    a.href = url;
    return {
        source: url,
        protocol: a.protocol.replace(':',''),
        host: a.hostname,
        port: a.port,
        query: a.search,
        params: (function(){
            var ret = {},
                    seg = a.search.replace(/^\?/,'').split('&'),
                    len = seg.length, i = 0, s;
            for (;i<len;i++) {
                if (!seg[i]) { continue; }
                s = seg[i].split('=');
                ret[s[0]] = s[1];
            }
            return ret;
        })(),
        file: (a.pathname.match(/\/([^\/?#]+)$/i) || [,''])[1],
        hash: a.hash.replace('#',''),
        path: a.pathname.replace(/^([^\/])/,'/$1'),
        relative: (a.href.match(/tps?:\/\/[^\/]+(.+)/) || [,''])[1],
        segments: a.pathname.replace(/^\//,'').split('/')
    };
}

function fintQunitTC(name)
{
    var qrunner_tests = QUnit.config.qrunner_tests;
    for(var cnt = 0; cnt < qrunner_tests.length; cnt++){
        if(qrunner_tests[cnt].testName == name)
            return qrunner_tests[cnt].testNumber;
    }

    return -1;
}

function lister(){
    if(tc_type == "jasmine")
        list();
    else if(tc_type == "qunit") {
        var qrunner_tests = QUnit.config.qrunner_tests;
        LOG("qrunner_tests.length : ", qrunner_tests.length);

        tc = new testcase_list("qunit");

        var current_moduel = "";
        var module_count = 0;
        for(var cnt = 0; cnt < qrunner_tests.length; cnt++)
        {
            if ( current_moduel != qrunner_tests[cnt].module ){
                //LOG("!!!>"+ current_moduel+"/"+qrunner_tests[cnt].module+"#");
                items.push(new test_item('suite' + qrunner_tests[cnt].testNumber , "suite", qrunner_tests[cnt].module));
                current_moduel = qrunner_tests[cnt].module;
                module_count++;
            }

            items[module_count-1].items.push(new test_item(qrunner_tests[cnt].testNumber, "spec", qrunner_tests[cnt].testName));
            //LOG(module_count + " ] " + qrunner_tests[cnt].testNumber +"/"+ qrunner_tests[cnt].module +"/"+ qrunner_tests[cnt].testName);
        }

        tc.count = qrunner_tests.length;
        tc.testcases = items;
        sendMessage(tc);
    }
    else
        LOG("error");
}

function runner(){
    if(tc_type == "jasmine")
    {
        jasmineRunnerInit();
        LOG("jasmine tc runner ");
        testStart();
    }
    else if(tc_type == "qunit")
    {
        LOG("qunit tc runner");
        qunitRunnerInit();
    }
    else
        LOG("runner test type error");
}

function createScript(file)
{
    var source = document.createElement('script');
    source.setAttribute("type","text/javascript");
    source.setAttribute("src", "./tc/"+file);
    document.head.appendChild(source);

    load++;
    source.onload = function(){
        loaded++;
        if( load == loaded ){
            if(tc_action == "list")
                lister();
            else
                runner();
        }
    };
}

function displayMessage (evt) {
    // if (evt.origin !== "http://127.0.0.1")
    LOG("from index.html - " + evt.data + " from " + evt.origin);
}

function init(){
    LOG("runner page init()");
    window.addEventListener("message", displayMessage, false);
    var url_parse = parseURL(document.URL);

    tc_type   = url_parse.params.type;
    tc_action = url_parse.params.action;
    tc_path   = url_parse.params.tc;

    LOG("tc path - " + tc_path);
    LOG("tc type - " + tc_type);
    LOG("tc action - " + tc_action);

    if(tc_type == "jasmine"){
        createScript(tc_path);
    }
    else if(tc_type == "qunit")
    {
        createScript(tc_path);
    }
    else
        LOG('unknown tc type');
}
